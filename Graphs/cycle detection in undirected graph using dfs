
//question link
// https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1#
/// for undirected graph;

#include<bits/stdc++.h>
using namespace std;
vector<int> vist(1000005,0);

bool checkforcycle(int src,vector<vector<int>>& adj,int parent)
{
    vist[src] = 1;
    for(auto it: adj[src])
    {
        if(vist[it] == 0)
        {
            if(checkforcycle(it,adj,src)) return true;
        }
        else if(it != parent) return true;
    }
return false ;
}

bool iscycle(int n,vector<vector<int>> &adj)
{
    for(int i=0;i<n;i++)
    {
        if(!vist[i])
        {
            if(checkforcycle(i,adj,-1)) return true;
        }
    }
    return false;
}


int main()
{
    int n,m;
    cin>>n>>m;
    vector<vector<int>> adj(n+1);
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    bool ans = iscycle(n,adj);
    if(ans)
    {
        cout<<"cycle is present "<<endl;
    }
    else 
    {
        cout<<"No cycle "<<endl;
    }    
return 0;
}



// bool checkforcycle(int src,vector<int> adj[],int parent,vector<int> &vist)
// {
//     vist[src] = 1;
//     for(auto it: adj[src])
//     {
//         if(vist[it] == 0)
//         {
//             if(checkforcycle(it,adj,src,vist)) return true;
//         }
//         else if(it != parent) return true;
//     }
// return false ;
// }

//   public:
//     // Function to detect cycle in an undirected graph.
    
//    bool isCycle(int n, vector<int> adj[]) {
//         // Code 
//         vector<int> vist(n+1,0);
//         for(int i=0;i<n;i++)
//         {
//             if(!vist[i])
//             {
//                 if(checkforcycle(i,adj,-1,vist)) return true;
//             }
//         }
//     return false;
//    }
